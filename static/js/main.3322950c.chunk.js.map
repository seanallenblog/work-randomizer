{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useStateWithCallbackLazy","weeklyTaskAssignments","setWeeklyTaskAssignments","dailyWorkers","setDailyWorkers","useState","dailyJobs","randomize","arry","j","x","index","length","Math","floor","random","className","type","onClick","e","preventDefault","newEmployeeLabel","document","createElement","classList","add","textContent","newEmployeeInput","appendChild","employeeForm","querySelector","refNode","insertBefore","Array","from","querySelectorAll","pop","remove","forEach","item","push","value","randomizedWorkers","cleanRandomWorkers","Set","console","log","map","idx","randomizedJobs","container","i","pair","cleanedContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0PAoLeA,MA/Kf,WACE,MAA0DC,mCAAyB,IAAnF,mBAAOC,EAAP,KAA8BC,EAA9B,KACA,EAAwCF,mCAAyB,IAAjE,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAkCC,mBAAS,CAAC,KAAM,KAAM,KAAM,OAA9D,mBAAOC,EAAP,KAGMC,GAHN,KAGkB,SAACC,GACjB,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAQH,EAAKI,OAAS,EAAGD,EAAQ,EAAGA,IACvCF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAQ,IACxCD,EAAIF,EAAKG,GACTH,EAAKG,GAASH,EAAKC,GACnBD,EAAKC,GAAKC,EAEZ,OAAOF,IAmFT,OACE,qBAAKQ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,uBAAMA,UAAU,gBAAhB,UACE,wBAAOA,UAAU,uBAAjB,qBAEE,uBACEA,UAAU,WACVC,KAAK,YAET,wBAAOD,UAAU,uBAAjB,qBAEE,uBACEA,UAAU,WACVC,KAAK,YAET,wBAAOD,UAAU,uBAAjB,qBAEE,uBACEA,UAAU,WACVC,KAAK,YAET,wBAAOD,UAAU,uBAAjB,qBAEE,uBACEA,UAAU,WACVC,KAAK,YAET,wBAAOD,UAAU,uBAAjB,qBAEE,uBACEA,UAAU,WACVC,KAAK,YAET,sBAAKD,UAAU,yBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,wBAAQA,UAAU,UAAUE,QA3DpB,SAACC,GACnBA,EAAEC,iBACF,IAAMC,EAAmBC,SAASC,cAAc,SAChDF,EAAiBG,UAAUC,IAAI,wBAC/BJ,EAAiBK,YAAc,WAC/B,IAAMC,EAAmBL,SAASC,cAAc,SAChDI,EAAiBV,KAAO,OACxBU,EAAiBH,UAAUC,IAAI,YAE/BJ,EAAiBO,YAAYD,GAE7B,IAAME,EAAeP,SAASQ,cAAc,kBACtCC,EAAUT,SAASQ,cAAc,2BACvCD,EAAaG,aAAaX,EAAkBU,IA8ClC,uBACA,wBAAQf,UAAU,aAAaE,QA5Cf,SAACC,GAC3BA,EAAEC,iBACqBa,MAAMC,KAAKZ,SAASa,iBAAiB,0BACnBC,MACvBC,UAwCR,4BAEF,sBAAKrB,UAAU,gBAAf,UACE,wBAAQA,UAAU,oBAAoBE,QAzG7B,SAACC,GACpBA,EAAEC,iBACqBa,MAAMC,KAAKZ,SAASa,iBAAiB,cAC7CG,SAAQ,SAACC,GAAD,OAAUpC,EAAaqC,KAAKD,EAAKE,UACxD,IAAMC,EAAoBnC,EAAUJ,GAC9BwC,EAAkB,YAAO,IAAIC,IAAIF,IACvCtC,EAAgBuC,GAChBE,QAAQC,IAAI3C,IAkGF,2BACA,wBAAQa,UAAU,sBAAsBE,QAhG7B,SAACC,GACtBA,EAAEC,iBACFhB,EAAgB,IAAI,WACK6B,MAAMC,KAAKZ,SAASa,iBAAiB,cAC7CG,SAAQ,SAACC,GACtBA,EAAKE,MAAQ,UA2FP,4BAMN,sBAAKzB,UAAU,kBAAf,UACE,6CACA,6BA7ECf,EAAsB8C,KAAI,SAACR,EAAMS,GACtC,OAAO,6BAAgBT,GAAPS,WAiFd,sBAAKhC,UAAU,YAAf,UACE,mDACA,6BA1FCV,EAAUyC,KAAI,SAACR,EAAMS,GAC1B,OAAO,6BAAgBT,GAAPS,WAuGd,wBACEhC,UAAU,kBACVE,QAvJW,WACjBhB,EAAyB,IAAI,WAI3B,IAHA,IAAM+C,EAAiB1C,EAAUD,GAC3BoC,EAAoBnC,EAAUJ,GAC9B+C,EAAY,GACTC,EAAI,EAAGA,EAAIF,EAAerC,OAAQuC,IAAK,CAC9C,IAAIC,EAAI,UAAMV,EAAkBS,GAAxB,aAA+BF,EAAeE,IACtDD,EAAUV,KAAKY,GAEjB,IAAMC,EAAgB,YAAO,IAAIT,IAAIM,IACrChD,EAAyBmD,OA2IvB,+BChKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAAS4C,eAAe,SAM1BZ,M","file":"static/js/main.3322950c.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport { useStateWithCallbackLazy } from 'use-state-with-callback';\n\n\nfunction App () {\n  const [weeklyTaskAssignments, setWeeklyTaskAssignments] = useStateWithCallbackLazy([]);\n  const [dailyWorkers, setDailyWorkers] = useStateWithCallbackLazy([]);\n  const [dailyJobs, setDailyJobs] = useState(['HG', 'B1', 'B2', '#1']);\n\n\n  const randomize = (arry) => {\n    let j, x, index;\n    for (index = arry.length - 1; index > 0; index--) {\n      j = Math.floor(Math.random() * (index + 1));\n      x = arry[index];\n      arry[index] = arry[j];\n      arry[j] = x;\n    }\n    return arry;\n  }\n\n\n  const assignJobs = () => {\n    setWeeklyTaskAssignments([], () => {\n      const randomizedJobs = randomize(dailyJobs);\n      const randomizedWorkers = randomize(dailyWorkers)\n      const container = [];\n      for (let i = 0; i < randomizedJobs.length; i++) {\n        let pair = `${randomizedWorkers[i]}: ${randomizedJobs[i]}`;\n        container.push(pair);\n      }\n      const cleanedContainer = [...new Set(container)];\n      setWeeklyTaskAssignments(cleanedContainer);\n    });\n  }\n\n  const setEmployees = (e) => {\n    e.preventDefault();\n    const dailyEmployees = Array.from(document.querySelectorAll('.employee'));\n    dailyEmployees.forEach((item) => dailyWorkers.push(item.value));\n    const randomizedWorkers = randomize(dailyWorkers);\n    const cleanRandomWorkers = [...new Set(randomizedWorkers)];\n    setDailyWorkers(cleanRandomWorkers);\n    console.log(dailyWorkers);\n  }\n\n  const clearEmployees = (e) => {\n    e.preventDefault();\n    setDailyWorkers([], () => {\n      const dailyEmployees = Array.from(document.querySelectorAll('.employee'));\n      dailyEmployees.forEach((item) => {\n        item.value = '';\n      });\n    });\n  }\n\n\n  // const setJobs = (e) => {\n  //   e.preventDefault();\n  //   const dailyTasks = Array.from(document.querySelectorAll('.jobs'));\n  //   dailyTasks.forEach((item) => dailyJobs.push(item.value));\n  //   const randomizedJobs = randomize(dailyTasks);\n  //   setDailyJobs(randomizedJobs);\n  //   console.log('Randomized Jobs:', dailyJobs);\n  // }\n\n  const renderJobsList = () => {\n    return dailyJobs.map((item, idx) => {\n      return <li key={idx} >{item}</li>\n    })\n  }\n\n  const renderAssignments = () => {\n    return weeklyTaskAssignments.map((item, idx) => {\n      return <li key={idx} >{item}</li>\n    })\n  }\n\n  const addEmployee = (e) => {\n    e.preventDefault();\n    const newEmployeeLabel = document.createElement('label');\n    newEmployeeLabel.classList.add('employee-field-label');\n    newEmployeeLabel.textContent = 'Employee';\n    const newEmployeeInput = document.createElement('input');\n    newEmployeeInput.type = 'text';\n    newEmployeeInput.classList.add('employee');\n\n    newEmployeeLabel.appendChild(newEmployeeInput);\n\n    const employeeForm = document.querySelector('.employee-form'); //Parent node\n    const refNode = document.querySelector('.employee-form-controls'); //Reference node\n    employeeForm.insertBefore(newEmployeeLabel, refNode);\n  }\n\n  const removeEmployeeField = (e) => {\n    e.preventDefault();\n    const employeeFields = Array.from(document.querySelectorAll('.employee-field-label'));\n    const lastEmployeeField = employeeFields.pop();\n    lastEmployeeField.remove();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form className=\"employee-form\">\n          <label className=\"employee-field-label\">\n            Employee\n            <input\n              className=\"employee\"\n              type=\"text\" />\n          </label>\n          <label className=\"employee-field-label\">\n            Employee\n            <input\n              className=\"employee\"\n              type=\"text\" />\n          </label>\n          <label className=\"employee-field-label\">\n            Employee\n            <input\n              className=\"employee\"\n              type=\"text\" />\n          </label>\n          <label className=\"employee-field-label\">\n            Employee\n            <input\n              className=\"employee\"\n              type=\"text\" />\n          </label>\n          <label className=\"employee-field-label\">\n            Employee\n            <input\n              className=\"employee\"\n              type=\"text\" />\n          </label>\n          <div className=\"employee-form-controls\">\n            <div className=\"add-and-remove\">\n              <button className=\"add-btn\" onClick={addEmployee}>Add field</button>\n              <button className=\"remove-btn\" onClick={removeEmployeeField}>Remove last</button>\n            </div>\n            <div className=\"clear-and-set\">\n              <button className=\"set-employees-btn\" onClick={setEmployees}>Set employees</button>\n              <button className=\"clear-employees-btn\" onClick={clearEmployees}>Reset</button>\n            </div>\n          </div>\n        </form>\n\n\n        <div className=\"job-assignments\">\n          <h3>Assignments</h3>\n          <ul>\n            {renderAssignments()}\n          </ul>\n        </div>\n\n        <div className=\"jobs-list\">\n          <h3>Current Jobs List</h3>\n          <ul>\n            {renderJobsList()}\n          </ul>\n        </\n        div>\n        {/* <form className=\"jobs-form\">\n          <label>\n            Job\n            <input\n              className=\"jobs\"\n              type=\"text\" />\n          </label>\n          <button onClick={setJobs}>Add job</button>\n        </form> */}\n        <button\n          className=\"assign-jobs-btn\"\n          onClick={assignJobs}>Assign Jobs</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}